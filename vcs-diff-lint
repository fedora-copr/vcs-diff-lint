#! /usr/bin/python3

"""
Using 'csdiff', print newly added coding errors.
"""

import fnmatch
import os
import sys
from subprocess import Popen, PIPE, check_output, check_call
import glob
import logging
import tempfile
from typing import List
import shutil
import argparse


logging.basicConfig(level=logging.ERROR, format='%(levelname)s: %(message)s')
log = logging.getLogger()  # pylint: disable=invalid-name

CSDIFF_PYLINT = os.path.realpath(os.path.join(os.path.dirname(__file__),
                                              'vcs-diff-lint-csdiff-pylint'))

CSDIFF_MYPY = os.path.realpath(os.path.join(os.path.dirname(__file__),
                                            'vcs-diff-lint-csdiff-mypy'))

CSDIFF_RUFF = os.path.realpath(
    os.path.join(os.path.dirname(__file__), 'vcs-diff-lint-csdiff-ruff'))


def _run_csdiff(old, new, msg):
    popen_diff = Popen(['csdiff', '-c', old, new],
                       stdout=PIPE)
    diff = popen_diff.communicate()[0].decode('utf-8')
    if diff:
        if msg:
            sep = "=" * (len(msg) + 2)
            print("# " + sep)
            print("#  {} ".format(msg))
            print("# " + sep + "\n")
        sys.stdout.write(diff)
    return int(bool(diff))


def file_type(filename):
    """
    Taking FILENAME (must exist), return it's type in string format.  Current
    supported formats are ('python',).
    """
    if filename.endswith(".py"):
        return 'python'

    if os.path.islink(filename):
        return 'unknown'

    with open(filename) as f_d:
        try:
            first_line = f_d.readline()
        except UnicodeDecodeError:
            return 'unknown'
        if first_line.startswith('#!') and first_line.find('python') != -1:
            return 'python'
    return 'unknown'


class _Linter:
    filetype = None
    path_filters = None
    linter_tags: List[str] = []

    def __init__(self, gitroot, renames=None):
        self.gitroot = gitroot
        self.renames = renames

    @classmethod
    def modify_rename(cls, old, new):
        """ if the paths in linter output need adjustments """
        return old, new

    def _sed_filter(self):
        if not self.renames:
            return None

        rules = []
        for pair in self.renames:
            old, new = self.modify_rename(pair[0], pair[1])
            rule = "s|^{}:|{}:|".format(old, new)
            rules += ['-e', rule]

        return ['sed'] + rules

    def command(self, projectdir, filenames):
        """
        Given the list of FILENAMES, generate command that will be executed
        by lint() method, and environment vars set.  Return (CMD, ENV) pair.
        """
        raise NotImplementedError

    # pylint: disable=no-self-use,unused-argument
    def is_compatible(self, file):
        """ file contains 'filename' and 'type' attributes """
        return True

    def lint(self, projectdir, files, logfd):
        """ run the linter """
        if not files:
            return

        abs_projectdir = os.path.join(self.gitroot, projectdir)

        oldcwd = os.getcwd()

        try:
            log.info("linting in %s", abs_projectdir)
            os.chdir(abs_projectdir)
            files = [f.filename for f in files if self.is_compatible(f)]
            if not files:
                return
            linter_cmd, linter_env = self.command(projectdir, files)
            log.debug("Running linter command: %s", linter_cmd)
            env = os.environ.copy()
            env.update(linter_env)
            sed_cmd = self._sed_filter()
            if sed_cmd:
                linter = Popen(linter_cmd, env=env, stdout=PIPE)
                sed = Popen(sed_cmd, stdout=logfd, stdin=linter.stdout)
                sed.communicate()
            else:
                linter = Popen(linter_cmd, env=env, stdout=logfd)
                linter.communicate()

        finally:
            os.chdir(oldcwd)


class PylintLinter(_Linter):
    """
    Generate pyilnt error output that is compatible with 'csdiff'.
    """
    linter_tags = [
        "pylint",
        "python",
    ]

    def is_compatible(self, file):
        return file.type == 'python'

    def command(self, projectdir, filenames):
        abs_pylintrc = os.path.join(self.gitroot, projectdir, 'pylintrc')
        pylintrc = os.path.realpath(abs_pylintrc)
        env = {}
        if os.path.exists(pylintrc):
            env['PYLINTRC'] = pylintrc
        cmd = [CSDIFF_PYLINT] + filenames
        return cmd, env


class MypyLinter(_Linter):
    """
    Generate Mypy error output compatible with 'csdiff'.
    """
    linter_tags = [
        "mypy",
        "python",
    ]

    def is_compatible(self, file):
        return file.type == 'python'

    def command(self, projectdir, filenames):
        cmd = [CSDIFF_MYPY] + filenames
        return cmd, {}


class RuffLinter(_Linter):
    """
    Generate Ruff error output compatible with 'csdiff'.
    """
    linter_tags = [
        "ruff",
        "python",
    ]

    def is_compatible(self, file):
        return file.type == 'python'

    def command(self, projectdir, filenames):
        cmd = [CSDIFF_RUFF]
        # Construct --config 'extend-include=["a", "b", ...]' option
        # per https://github.com/astral-sh/ruff/issues/13122
        explicitly_include = [fn for fn in filenames if not fn.endswith(".py")]
        if explicitly_include:
            extend_include = ','.join([f'"{fn}"' for fn in explicitly_include])
            extend_include = f'extend-include=[{extend_include}]'
            cmd += ["--config", extend_include]

        # While we optimize other analyzers and we scan only the changed
        # set of files, Ruff is fast enough to do full-projectdir scan.
        cmd.append(os.path.join(self.gitroot, projectdir))
        return cmd, {}


def get_rename_map(options, subdir):
    """
    Using the os.getcwd() and 'git diff --namestatus', generate list of
    files to analyze with possible overrides.  The returned format is
    dict of format 'new_file' -> 'old_file'.
    """
    cmd = ['git', 'diff', '--name-status', '-C', options.compare_against,
           '--numstat', '--relative', os.path.join(".", subdir)]

    log.debug("running: %s", " ".join(cmd))
    # current file -> old_name
    return_map = {}
    output = check_output(cmd).decode('utf-8')
    for line in output.split('\n'):
        if not line:
            continue

        parts = line.split('\t')
        mode = parts[0]
        if mode == '':
            continue
        if mode.startswith('R'):
            log.debug("renamed: %s -> %s", parts[1], parts[2])
            return_map[parts[2]] = parts[1]
        elif mode.startswith('A'):
            log.debug("new: %s", parts[1])
            return_map[parts[1]] = None
        elif mode == 'M':
            log.debug("modified: %s", parts[1])
            return_map[parts[1]] = parts[1]
        else:
            log.info("skipping diff mode %s for file %s", mode, parts[1])

    return return_map


class _Worker:  # pylint: disable=too-few-public-methods
    gitroot = None
    # relative path within gitroot to the sub-project
    projectdir = None
    projectsubdir = None
    workdir = None
    checkout = None
    linters = [PylintLinter, MypyLinter, RuffLinter]

    def __init__(self, options):
        self.options = options

    def _analyze_projectdir(self):
        """ find sub-directory in git repo which contains spec file """
        gitroot = check_output(['git', 'rev-parse', '--show-toplevel'])
        self.gitroot = gitroot.decode('utf-8').strip()

        checkout = check_output(['git', 'rev-parse',
                                 self.options.compare_against])
        self.checkout = checkout.decode('utf-8').strip()

        def rel_projdir(projdir):
            gitroot_a = os.path.realpath(self.gitroot)
            gitproj_a = os.path.realpath(projdir)
            cwd_a = os.path.realpath(os.getcwd())
            self.projectdir = gitproj_a.replace(gitroot_a + '/', '')
            self.projectsubdir = (cwd_a + "/").replace(
                "{}/{}/".format(gitroot_a, self.projectdir), "")
            log.debug("relative projectdir: %s", self.projectdir)
            log.debug("project subdir: %s", self.projectsubdir)

        path = os.getcwd()
        while True:
            log.info("checking for projectdir: %s", path)
            if os.path.realpath(path) == '/':
                raise Exception("project dir not found")
            if os.path.exists(os.path.join(path, '.git')):
                # .git is either directory (normally) or regular file
                # in case of running from a git worktree.
                log.debug("Non-monorepo use-case detected")
                self.projectdir = '.'
                self.projectsubdir = '.'
                return
            if glob.glob(os.path.join(path, '*.spec')):
                rel_projdir(path)
                return
            if os.path.exists(os.path.join(path, ".vcs-diff-lint.yml")):
                rel_projdir(path)
                return
            path = os.path.normpath(os.path.join(path, '..'))

    def _run_linters(self, old_report_fd, new_report_fd):
        # pylint: disable=too-many-locals
        lookup = get_rename_map(self.options, self.projectsubdir)
        if not lookup:
            return

        # prepare the old checkout
        old_gitroot = os.path.join(self.workdir, 'old_dir')
        new_gitroot = os.path.join(self.workdir, 'new_dir')
        origin_from = self.gitroot
        check_call(['git', 'clone', '--quiet', origin_from, old_gitroot])
        check_call(['git', 'clone', '--quiet', origin_from, new_gitroot])
        ret_cwd = os.getcwd()
        try:
            os.chdir(old_gitroot)
            check_call(['git', 'checkout', '-q', self.checkout])
        finally:
            os.chdir(ret_cwd)

        try:
            os.chdir(new_gitroot)
            with Popen(["git", "-C", origin_from, "diff", "--cached"],
                       stdout=PIPE) as diff:
                check_call(["git", "apply", "--allow-empty", "--index", "-"],
                      stdin=diff.stdout)
            with Popen(["git", "-C", origin_from, "diff"],
                       stdout=PIPE) as diff:
                check_call(["git", "apply", "--allow-empty", "-"],
                      stdin=diff.stdout)
        finally:
            os.chdir(ret_cwd)

        def add_file(gitroot, files, filename):
            if not filename:
                return
            git_file = os.path.join(gitroot, self.projectdir, filename)
            if not os.path.isfile(git_file):
                log.debug("skipping non-file %s", filename)
                return
            file = lambda: None  # noqa: E731
            file.filename = filename
            file.type = file_type(git_file)
            files.append(file)

        old_files = []
        new_files = []
        for filename in lookup:
            add_file(self.gitroot, new_files, filename)
            add_file(old_gitroot, old_files, lookup[filename])

        renames = []
        for new in lookup:
            old = lookup[new]
            if old and old != new:
                renames.append((old, new))

        selected_linters = set()

        log.debug("Selected linters %s", self.options.linter_tags)

        for linter in self.linters:
            found = False
            for pattern in self.options.linter_tags:
                for tag in linter.linter_tags:
                    if fnmatch.fnmatch(tag, pattern):
                        selected_linters.add(linter)
                        found = True
                        break
                if found:
                    break

        for linterClass in selected_linters:
            linter_new = linterClass(new_gitroot)
            linter_old = linterClass(old_gitroot, renames)
            linter_new.lint(self.projectdir, new_files, logfd=new_report_fd)
            linter_old.lint(self.projectdir, old_files, logfd=old_report_fd)

    def run(self):
        """
        Run all the 'self.linters' against old sources and new sources,
        and provide the diff.
        """
        self._analyze_projectdir()
        self.workdir = tempfile.mkdtemp(prefix='vcs-diff-lint-')
        try:
            old_report = os.path.join(self.workdir, 'old')
            new_report = os.path.join(self.workdir, 'new')

            with open(old_report, 'w') as old, open(new_report, 'w') as new:
                oldcwd = os.getcwd()
                try:
                    pd = os.path.join(self.gitroot, self.projectdir)
                    log.debug("Switching to project directory %s", pd)
                    os.chdir(pd)
                    self._run_linters(old, new)
                finally:
                    os.chdir(oldcwd)

            msg = None
            if self.options.print_fixed_errors:
                msg = "Added warnings"

            exit_status = _run_csdiff(old_report, new_report, msg)

            if self.options.print_fixed_errors:
                print()
                _run_csdiff(new_report, old_report, "Fixed warnings")

            sys.exit(exit_status)


        finally:
            log.debug("removing workdir %s", self.workdir)
            if not self.options.no_cleanup:
                shutil.rmtree(self.workdir)


def _get_arg_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--compare-against",
        default="origin/main",
        help=("What git ref to diff the linters' results against.  Note "
              "that the reference needs to be available in the current "
              "git directory"))
    parser.add_argument(
        "--log-level",
        default='error',
        help="The python logging level, e.g. debug, error, ...")
    parser.add_argument(
        "--no-cleanup",
        action='store_true',
        default=False,
        help=("Keep the temporary working directory, you can use the "
              "--log-level=info switch to see where it is created"),
    )
    parser.add_argument(
        "--print-fixed-errors",
        action='store_true',
        default=False,
        help="Also print defects which were fixed by the changes",
    )
    parser.add_argument(
        "--linter-tag",
        metavar="TAG_PATTERN",
        dest="linter_tags",
        default=None,
        action="append",
        help=(
            "Select a set of linters using TAGS (fnmatch pattern). "
            "Can be specified multiple times."
        ),
    )
    return parser


def _main():
    options = _get_arg_parser().parse_args()
    if options.linter_tags is None:
        # By default select all
        options.linter_tags = ['*']
    log.setLevel(level=getattr(logging, options.log_level.upper()))
    worker = _Worker(options)
    worker.run()


if __name__ == "__main__":
    _main()
